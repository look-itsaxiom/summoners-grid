// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================================================

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String   @map("password_hash")
  displayName   String?  @map("display_name")
  avatarUrl     String?  @map("avatar_url")
  
  // Player Statistics
  level         Int      @default(1)
  experience    Int      @default(0)
  rating        Int      @default(1000)
  peakRating    Int      @default(1000) @map("peak_rating")
  totalGames    Int      @default(0) @map("total_games")
  gamesWon      Int      @default(0) @map("games_won")
  
  // Account Status
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  isBanned      Boolean  @default(false) @map("is_banned")
  banReason     String?  @map("ban_reason")
  banExpiresAt  DateTime? @map("ban_expires_at")
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")

  // Relationships
  cardInstances  CardInstance[]
  decks          Deck[]
  
  // Trading relationships
  proposedTrades TradeProposal[] @relation("ProposedTrades")
  receivedTrades TradeProposal[] @relation("ReceivedTrades")
  
  // Game session relationships
  gameSessionsA  GameSession[] @relation("PlayerA")
  gameSessionsB  GameSession[] @relation("PlayerB")
  wonGames       GameSession[] @relation("Winner")
  
  // Friendship relationships
  sentFriendRequests     FriendRequest[] @relation("Requester")
  receivedFriendRequests FriendRequest[] @relation("Receiver")
  friendsA               Friendship[] @relation("UserA")
  friendsB               Friendship[] @relation("UserB")
  
  // Authentication sessions
  sessions       UserSession[]
  refreshTokens  RefreshToken[]
  
  // Ownership history as both previous and new owner
  previousOwnerships OwnershipHistory[] @relation("PreviousOwner")
  newOwnerships      OwnershipHistory[] @relation("NewOwner")

  @@map("users")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  ipAddress String   @map("ip_address")
  userAgent String   @map("user_agent")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// ============================================================================
// CARD SYSTEM & DIGITAL PROVENANCE
// ============================================================================

model CardTemplate {
  id            String   @id // e.g., "001", "020", etc.
  name          String
  type          CardType
  rarity        Rarity
  attribute     Attribute
  speed         Speed?
  
  // Game mechanics (stored as JSON for flexibility)
  requirements  Json?    // Requirements to play (role, level, etc.)
  effects       Json?    // Card effects and abilities
  stats         Json?    // For summon cards: STR, INT, etc.
  equipment     Json?    // For equipment cards: bonuses, effects
  
  // Metadata
  flavorText    String?  @map("flavor_text")
  imageUrl      String?  @map("image_url")
  tier          Int?     // For role cards: 1, 2, 3
  family        String?  // For role cards: warrior, magician, scout
  
  // Set information
  setCode       String   @map("set_code") @default("ALPHA")
  cardNumber    String   @map("card_number")
  
  // Timestamps
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relationships
  cardInstances CardInstance[]

  @@unique([setCode, cardNumber])
  @@map("card_templates")
}

model CardInstance {
  id                String    @id @default(uuid())
  templateId        String    @map("template_id")
  ownerId           String    @map("owner_id")
  
  // Unique properties for this specific card instance
  uniqueStats       Json?     @map("unique_stats")     // For summon cards with random stats
  uniqueProperties  Json?     @map("unique_properties") // Other unique aspects
  
  // Digital provenance system
  signature         String    @unique                   // Cryptographic signature
  signatureChain    String[]  @map("signature_chain")  // Chain of ownership signatures
  mintedAt          DateTime  @default(now()) @map("minted_at")
  
  // Acquisition tracking
  acquiredMethod    String    @map("acquired_method")  // "pack_opening", "trade", "reward", etc.
  acquisitionData   Json?     @map("acquisition_data") // Additional context
  lastTransferred   DateTime? @map("last_transferred")
  
  // State tracking
  isLocked          Boolean   @default(false) @map("is_locked") // Locked in trades/games
  
  // Timestamps
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relationships
  template          CardTemplate @relation(fields: [templateId], references: [id])
  owner             User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownershipHistory  OwnershipHistory[]

  @@map("card_instances")
}

model OwnershipHistory {
  id               String   @id @default(uuid())
  cardInstanceId   String   @map("card_instance_id")
  previousOwnerId  String?  @map("previous_owner_id")
  newOwnerId       String   @map("new_owner_id")
  
  // Transfer details
  transferMethod   String   @map("transfer_method") // "trade", "gift", "admin", etc.
  transferData     Json?    @map("transfer_data")   // Additional context
  signature        String                           // Cryptographic proof
  verified         Boolean  @default(false)
  
  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")

  // Relationships
  cardInstance     CardInstance @relation(fields: [cardInstanceId], references: [id], onDelete: Cascade)
  previousOwner    User? @relation("PreviousOwner", fields: [previousOwnerId], references: [id])
  newOwner         User @relation("NewOwner", fields: [newOwnerId], references: [id])

  @@map("ownership_history")
}

// ============================================================================
// DECK BUILDING & MANAGEMENT
// ============================================================================

model Deck {
  id               String   @id @default(uuid())
  ownerId          String   @map("owner_id")
  name             String
  description      String?
  format           String   @default("3v3")
  
  // Deck composition (stored as JSON for flexibility)
  summonSlots      Json     @map("summon_slots")      // Array of summon slot configurations
  mainDeck         String[] @map("main_deck")         // Card instance IDs
  advanceDeck      String[] @map("advance_deck")      // Card instance IDs
  
  // Validation
  isValid          Boolean  @default(false) @map("is_valid")
  validationErrors Json?    @map("validation_errors")
  
  // Visibility
  isPublic         Boolean  @default(false) @map("is_public")
  isArchived       Boolean  @default(false) @map("is_archived")
  
  // Statistics
  gamesPlayed      Int      @default(0) @map("games_played")
  gamesWon         Int      @default(0) @map("games_won")
  
  // Timestamps
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relationships
  owner            User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("decks")
}

// ============================================================================
// TRADING SYSTEM
// ============================================================================

model TradeProposal {
  id                 String    @id @default(uuid())
  proposerId         String    @map("proposer_id")
  targetPlayerId     String    @map("target_player_id")
  
  // Trade contents
  offeredCards       String[]  @map("offered_cards")   // Card instance IDs
  requestedCards     String[]  @map("requested_cards") // Card instance IDs
  additionalTerms    Json?     @map("additional_terms") // Extra conditions
  
  // Status
  status             TradeStatus @default(PENDING)
  message            String?
  
  // Timing
  expiresAt          DateTime  @map("expires_at")
  acceptedAt         DateTime? @map("accepted_at")
  completedAt        DateTime? @map("completed_at")
  cancelledAt        DateTime? @map("cancelled_at")
  cancellationReason String?   @map("cancellation_reason")
  
  // Verification
  proposerSignature  String?   @map("proposer_signature")
  targetSignature    String?   @map("target_signature")
  
  // Timestamps
  createdAt          DateTime  @default(now()) @map("created_at")

  // Relationships
  proposer           User @relation("ProposedTrades", fields: [proposerId], references: [id], onDelete: Cascade)
  targetPlayer       User @relation("ReceivedTrades", fields: [targetPlayerId], references: [id], onDelete: Cascade)

  @@map("trade_proposals")
}

// ============================================================================
// GAME SESSIONS & MATCHMAKING
// ============================================================================

model GameSession {
  id              String    @id @default(uuid())
  gameId          String    @unique @map("game_id")     // Used by game server
  gameMode        String    @map("game_mode")           // "ranked", "casual", "private"
  format          String    @default("3v3")
  
  // Players
  playerAId       String?   @map("player_a_id")
  playerBId       String?   @map("player_b_id")
  winnerId        String?   @map("winner_id")
  
  // Game state
  status          GameStatus @default(WAITING)
  currentTurn     Int       @default(1) @map("current_turn")
  currentPhase    String?   @map("current_phase")
  
  // Timing
  startTime       DateTime? @map("start_time")
  endTime         DateTime? @map("end_time")
  durationSeconds Int?      @map("duration_seconds")
  
  // Results
  ratingChanges   Json?     @map("rating_changes")      // ELO changes for players
  gameData        Json?     @map("game_data")           // Final game state, moves, etc.
  disconnections  Json?     // Track any disconnections
  
  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relationships
  playerA         User? @relation("PlayerA", fields: [playerAId], references: [id])
  playerB         User? @relation("PlayerB", fields: [playerBId], references: [id])
  winner          User? @relation("Winner", fields: [winnerId], references: [id])

  @@map("game_sessions")
}

// ============================================================================
// SOCIAL FEATURES
// ============================================================================

model FriendRequest {
  id          String    @id @default(uuid())
  requesterId String    @map("requester_id")
  receiverId  String    @map("receiver_id")
  status      FriendRequestStatus @default(PENDING)
  message     String?
  respondedAt DateTime? @map("responded_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  requester   User @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  receiver    User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([requesterId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id          String   @id @default(uuid())
  userAId     String   @map("user_a_id")
  userBId     String   @map("user_b_id")
  createdAt   DateTime @default(now()) @map("created_at")

  userA       User @relation("UserA", fields: [userAId], references: [id], onDelete: Cascade)
  userB       User @relation("UserB", fields: [userBId], references: [id], onDelete: Cascade)

  @@unique([userAId, userBId])
  @@map("friendships")
}

// ============================================================================
// SYSTEM & AUDIT LOGS
// ============================================================================

model AuditLog {
  id          String    @id @default(uuid())
  userId      String?   @map("user_id")
  action      String
  entityType  String    @map("entity_type")
  entityId    String?   @map("entity_id")
  oldData     Json?     @map("old_data")
  newData     Json?     @map("new_data")
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@map("audit_logs")
}

// ============================================================================
// ENUMS
// ============================================================================

enum CardType {
  SUMMON
  ROLE
  ACTION
  BUILDING
  WEAPON
  ADVANCE
  COUNTER
  QUEST
  UNIQUE

  @@map("card_type")
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  LEGENDARY
  MYTH
  SPECIAL

  @@map("rarity")
}

enum Attribute {
  NEUTRAL
  FIRE
  WATER
  EARTH
  WIND
  LIGHT
  DARK
  NATURE

  @@map("attribute")
}

enum Speed {
  COUNTER
  REACTION
  ACTION

  @@map("speed")
}

enum TradeStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
  EXPIRED

  @@map("trade_status")
}

enum GameStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  ABANDONED

  @@map("game_status")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED

  @@map("friend_request_status")
}